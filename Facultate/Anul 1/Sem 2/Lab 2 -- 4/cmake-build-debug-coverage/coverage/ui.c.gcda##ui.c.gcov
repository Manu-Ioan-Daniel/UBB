        -:    0:Source:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/ui/ui.c
        -:    0:Graph:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/ui/ui.c.gcno
        -:    0:Data:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/ui/ui.c.gcda
        -:    0:Runs:1
        -:    1:#include "ui.h"
function run called 1 returned 100% blocks executed 38%
        1:    2:void run(Lista* l){
        -:    3:    char optiune[100];
        2:    4:    while(optiune[0]!='0'){
        1:    4-block  0
        2:    4-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:    5:        printf("Introdu optiunea dorita:\n1.Adauga oferta\n2.Sterge oferta\n3.Modifica oferta\n4.Afiseaza ofertele\n5.Sortare oferte\n6.Filtrare\n0.Iesire\n");
        1:    5-block  0
call    0 returned 1
        1:    6:        scanf("%s",optiune);
call    0 returned 1
        1:    7:        getchar();
call    0 returned 1
       1*:    8:        if(strlen(optiune)>1){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:    9:            printf("Optiune invalida\n");
    %%%%%:    9-block  0
call    0 never executed
    #####:   10:            optiune[0]='1';
    #####:   11:            continue;
        -:   12:        }
        1:   13:        switch(optiune[0]){
        1:   13-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
    #####:   14:            case '1':
    #####:   15:                adaugaOfertaUI(l);
    %%%%%:   15-block  0
call    0 never executed
    #####:   16:                break;
    #####:   17:            case '2':
    #####:   18:                stergeOfertaUI(l);
    %%%%%:   18-block  0
call    0 never executed
    #####:   19:                break;
    #####:   20:            case '3':
    #####:   21:                modificaOfertaUI(l);
    %%%%%:   21-block  0
call    0 never executed
    #####:   22:                break;
    #####:   23:            case '4':
    #####:   24:                afisareOferteUI(l);
    %%%%%:   24-block  0
call    0 never executed
    #####:   25:                break;
    #####:   26:            case '5':
    #####:   27:                sortareUI(l);
    %%%%%:   27-block  0
call    0 never executed
    #####:   28:                break;
    #####:   29:            case '6':
    #####:   30:                filtrareUI(l);
    %%%%%:   30-block  0
call    0 never executed
    #####:   31:                break;
        1:   32:            case '0':
        1:   33:                break;
        1:   33-block  0
    #####:   34:            default:
    #####:   35:                printf("Optiune invalida\n");
    %%%%%:   35-block  0
call    0 never executed
    #####:   36:                optiune[0]='1';
        -:   37:        }
        -:   38:    }
        -:   39:    
        1:   40:}
function handle_errors called 0 returned 0% blocks executed 0%
    #####:   41:void handle_errors(Errors errors) {
    #####:   42:    if (errors & REPO_ERROR)
    %%%%%:   42-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   43:        printf("Eroare de repo\n");
    %%%%%:   43-block  0
call    0 never executed
    #####:   44:    if (errors & TIP_INVALID)
    %%%%%:   44-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   45:        printf("Tip invalid\n");
    %%%%%:   45-block  0
call    0 never executed
    #####:   46:    if (errors & ADRESA_INVALIDA)
    %%%%%:   46-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   47:        printf("Adresa invalida\n");
    %%%%%:   47-block  0
call    0 never executed
    #####:   48:    if (errors & PRET_INVALID)
    %%%%%:   48-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   49:        printf("Pret invalid\n");
    %%%%%:   49-block  0
call    0 never executed
    #####:   50:    if (errors & SUPRAFATA_INVALIDA) {
    %%%%%:   50-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   51:        printf("Suprafata invalida\n");
    %%%%%:   51-block  0
call    0 never executed
        -:   52:    }
    #####:   53:}
function getFloat called 0 returned 0% blocks executed 0%
    #####:   54:void getFloat(const char* mesaj, float* f) {
    %%%%%:   54-block  0
        -:   55:    char input[100];
        -:   56:    while (1) {
    #####:   57:        printf("%s", mesaj);
    %%%%%:   57-block  0
call    0 never executed
    #####:   58:        fgets(input, 100, stdin);
call    0 never executed
    #####:   59:        if (sscanf(input, "%f", f) == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   60:            break;
    %%%%%:   60-block  0
        -:   61:        } else {
    #####:   62:            printf("Introdu un numar valid\n");
    %%%%%:   62-block  0
call    0 never executed
        -:   63:        }
        -:   64:    }
    #####:   65:}
        -:   66:
        -:   67:
function adaugaOfertaUI called 0 returned 0% blocks executed 0%
    #####:   68:void adaugaOfertaUI(Lista* l){
        -:   69:    char adresa[100],tip[12];
        -:   70:    float suprafata,pret;
    #####:   71:    printf("Introdu adresa:");
    %%%%%:   71-block  0
call    0 never executed
    #####:   72:    fgets(adresa,100,stdin);
call    0 never executed
    #####:   73:    adresa[strlen(adresa)-1]='\0';
    #####:   74:    printf("Introdu tipul:");
call    0 never executed
    #####:   75:    fgets(tip,12,stdin);
call    0 never executed
    #####:   76:    tip[strlen(tip)-1]='\0';
    #####:   77:    getFloat("Introdu suprafata:",&suprafata);
call    0 never executed
    #####:   78:    getFloat("Introdu pret:",&pret);
call    0 never executed
    #####:   79:    Errors errors=adaugaOfertaService(adresa,pret,tip,suprafata,l);
call    0 never executed
    #####:   80:    if (errors!=SUCCES) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   81:        handle_errors(errors);
    %%%%%:   81-block  0
call    0 never executed
        -:   82:    }
        -:   83:
    #####:   84:}
function stergeOfertaUI called 0 returned 0% blocks executed 0%
    #####:   85:void stergeOfertaUI(Lista* l){
        -:   86:    char adresa[100];
    #####:   87:    printf("Introdu adresa ofertei pe care vrei sa o stergi:");
    %%%%%:   87-block  0
call    0 never executed
    #####:   88:    fgets(adresa,100,stdin);
call    0 never executed
    #####:   89:    adresa[strlen(adresa)-1]='\0';
    #####:   90:    Errors errors = stergeOfertaService(adresa,l);
call    0 never executed
    #####:   91:    if (errors!=SUCCES)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   92:        handle_errors(errors);
    %%%%%:   92-block  0
call    0 never executed
    #####:   93:}
function modificaOfertaUI called 0 returned 0% blocks executed 0%
    #####:   94:void modificaOfertaUI(Lista* l) {
        -:   95:    char adresa[100], adresaNoua[100], tipNou[12];
        -:   96:    float suprafataNoua, pretNou;
        -:   97:
    #####:   98:    printf("Introdu adresa ofertei pe care vrei sa o modifici:");
    %%%%%:   98-block  0
call    0 never executed
    #####:   99:    fgets(adresa, 100, stdin);
call    0 never executed
    #####:  100:    adresa[strlen(adresa) - 1] = '\0';
        -:  101:
        -:  102:
    #####:  103:    printf("Introdu noua adresa:");
call    0 never executed
    #####:  104:    fgets(adresaNoua, 100, stdin);
call    0 never executed
    #####:  105:    adresaNoua[strlen(adresaNoua) - 1] = '\0';
        -:  106:
        -:  107:
    #####:  108:    printf("Introdu noul tip:");
call    0 never executed
    #####:  109:    fgets(tipNou, 12, stdin);
call    0 never executed
    #####:  110:    tipNou[strlen(tipNou) - 1] = '\0';
        -:  111:
        -:  112:
    #####:  113:    getFloat("Introdu noua suprafata:", &suprafataNoua);
call    0 never executed
    #####:  114:    getFloat("Introdu noul pret:", &pretNou);
call    0 never executed
        -:  115:
    #####:  116:    Errors errors = modificaOfertaService(adresa, adresaNoua, suprafataNoua, tipNou, pretNou, l);
call    0 never executed
    #####:  117:    if (errors!=SUCCES)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  118:        handle_errors(errors);
    %%%%%:  118-block  0
call    0 never executed
        -:  119:
    #####:  120:}
function afisareOferteUI called 0 returned 0% blocks executed 0%
    #####:  121:void afisareOferteUI(Lista* l){
    #####:  122:    if (l->len==0)
    %%%%%:  122-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  123:        printf("Nu exista oferte\n");
    %%%%%:  123-block  0
call    0 never executed
    #####:  124:    for(int i=0;i<l->len;i++)
    %%%%%:  124-block  0
    %%%%%:  124-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  125:        printf("Adresa:%s Tip:%s Suprafata:%.2f Pret:%.2f\n",l->oferte[i].adresa,l->oferte[i].tip,l->oferte[i].suprafata,l->oferte[i].pret);
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:}
function sortareUI called 0 returned 0% blocks executed 0%
    #####:  127:void sortareUI(Lista* l){
        -:  128:    char reverse[50];
        -:  129:    Lista* rez;
    #####:  130:    printf("Cum vrei sortarea?(crescatoare/descrescatoare):");
    %%%%%:  130-block  0
call    0 never executed
    #####:  131:    fgets(reverse,50,stdin);
call    0 never executed
    #####:  132:    reverse[strlen(reverse)-1]='\0';
    #####:  133:    if(strcmp(reverse,"descrescatoare")==0)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  134:        rez=sortare(l,1);
    %%%%%:  134-block  0
call    0 never executed
    #####:  135:    else if (strcmp(reverse,"crescatoare")==0)
    %%%%%:  135-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  136:        rez=sortare(l,0);
    %%%%%:  136-block  0
call    0 never executed
        -:  137:    else {
    #####:  138:        printf("%s","Sortare invalida\n");
    %%%%%:  138-block  0
call    0 never executed
    #####:  139:        return;
        -:  140:    }
    #####:  141:    afisareOferteUI(rez);
    %%%%%:  141-block  0
call    0 never executed
    #####:  142:    destroyList(rez);
call    0 never executed
        -:  143:
        -:  144:}
function filtrareUI called 0 returned 0% blocks executed 0%
    #####:  145:void filtrareUI(Lista* l) {
        -:  146:    char filtru[50];
        -:  147:    Lista* filtrate;
    #####:  148:    printf("Introdu un filtru:");
    %%%%%:  148-block  0
call    0 never executed
    #####:  149:    fgets(filtru,50,stdin);
call    0 never executed
    #####:  150:    filtru[strlen(filtru)-1]='\0';
    #####:  151:    if (strcmp(filtru,"suprafata")==0) {
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  152:        float suprafata;
    #####:  153:        getFloat("Introdu o suprafata:",&suprafata);
    %%%%%:  153-block  0
call    0 never executed
    #####:  154:        filtrate=filtrareDupaSuprafata(suprafata,l);
call    0 never executed
    #####:  155:        if (filtrate==NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  156:            printf("Eroare la filtrare.Verifica datele introduse!\n");
    %%%%%:  156-block  0
call    0 never executed
    #####:  157:            return;
        -:  158:        }
    #####:  159:        afisareOferteUI(filtrate);
    %%%%%:  159-block  0
call    0 never executed
    #####:  160:        destroyList(filtrate);
call    0 never executed
        -:  161:
        -:  162:    }
    #####:  163:    else if (strcmp(filtru,"tip")==0) {
    %%%%%:  163-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  164:        char tip[12];
    #####:  165:        printf("Introdu un tip:");
    %%%%%:  165-block  0
call    0 never executed
    #####:  166:        fgets(tip,12,stdin);
call    0 never executed
    #####:  167:        tip[strlen(tip)-1]='\0';
    #####:  168:        filtrate=filtrareDupaTip(tip,l);
call    0 never executed
    #####:  169:        if (filtrate==NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  170:            printf("Eroare la filtrare.Verifica datele introduse!\n");
    %%%%%:  170-block  0
call    0 never executed
    #####:  171:            return;
        -:  172:        }
    #####:  173:        afisareOferteUI(filtrate);
    %%%%%:  173-block  0
call    0 never executed
    #####:  174:        destroyList(filtrate);
call    0 never executed
        -:  175:
        -:  176:
        -:  177:
        -:  178:    }
    #####:  179:    else if (strcmp(filtru,"pret")==0) {
    %%%%%:  179-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  180:        float pret;
    #####:  181:        getFloat("Introdu un pret:",&pret);
    %%%%%:  181-block  0
call    0 never executed
    #####:  182:        filtrate=filtrareDupaPret(pret,l);
call    0 never executed
    #####:  183:        if (filtrate==NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  184:            printf("Eroare la filtrare.Verifica datele introduse!\n");
    %%%%%:  184-block  0
call    0 never executed
    #####:  185:            return;
        -:  186:        }
    #####:  187:        afisareOferteUI(filtrate);
    %%%%%:  187-block  0
call    0 never executed
    #####:  188:        destroyList(filtrate);
call    0 never executed
        -:  189:
        -:  190:
        -:  191:    }else
    #####:  192:        printf("Filtru invalid.Filtru poate fi doar tip,pret,suprafata\n");
    %%%%%:  192-block  0
call    0 never executed
        -:  193:
        -:  194:
        -:  195:
        -:  196:}
