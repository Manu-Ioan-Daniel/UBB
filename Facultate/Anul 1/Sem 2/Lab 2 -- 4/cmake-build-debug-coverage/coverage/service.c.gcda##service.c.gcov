        -:    0:Source:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/infrastructura/service.c
        -:    0:Graph:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/infrastructura/service.c.gcno
        -:    0:Data:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/infrastructura/service.c.gcda
        -:    0:Runs:1
        -:    1:#include "service.h"
        -:    2:
        -:    3:#include "../ui/ui.h"
        -:    4:
        -:    5:
function adaugaOfertaService called 8 returned 100% blocks executed 100%
        8:    6:int adaugaOfertaService(char adresa[],float pret,char tip[],float suprafata,Lista* l)
        -:    7:{
        -:    8:    Oferta o;
        8:    9:    strcpy(o.adresa,adresa);
        8:   10:    o.pret=pret;
        8:   11:    strcpy(o.tip,tip);
        8:   12:    o.suprafata=suprafata;
        8:   13:    Errors errors = valideazaOferta(o);
        8:   13-block  0
call    0 returned 8
        -:   14:
        8:   15:    if (errors!=SUCCES)
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1:   16:        return errors;
        1:   16-block  0
        7:   17:    if (adaugaOferta(o,l)!=SUCCES)
        7:   17-block  0
call    0 returned 7
branch  1 taken 1 (fallthrough)
branch  2 taken 6
        1:   18:        return REPO_ERROR;
        1:   18-block  0
        6:   19:    return SUCCES;
        6:   19-block  0
        -:   20:
        -:   21:    
        -:   22:}
        -:   23:
        -:   24:
function stergeOfertaService called 3 returned 100% blocks executed 100%
        3:   25:int stergeOfertaService(char adresa[],Lista* l)
        -:   26:{
        -:   27:    Oferta o;
        3:   28:    if (strcmp(adresa,"")==0)
        3:   28-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   29:        return ADRESA_INVALIDA;
        1:   29-block  0
        2:   30:    if (stergeOferta(adresa,l)!=SUCCES)
        2:   30-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   31:        return REPO_ERROR;
        1:   31-block  0
        1:   32:    return SUCCES;
        1:   32-block  0
        -:   33:}
        -:   34:
        -:   35:
function modificaOfertaService called 4 returned 100% blocks executed 100%
        4:   36:int modificaOfertaService(char adresa[],char adresaNoua[],float suprafataNoua,char tipNou[],float pretNou,Lista* l)
        -:   37:{
        -:   38:    Oferta o;
        4:   39:    if (strcmp(adresa,"")==0)
        4:   39-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   40:        return ADRESA_INVALIDA;
        1:   40-block  0
        3:   41:    strcpy(o.adresa,adresaNoua);
        3:   42:    o.pret=pretNou;
        3:   43:    strcpy(o.tip,tipNou);
        3:   44:    o.suprafata=suprafataNoua;
        3:   45:    Errors errors = valideazaOferta(o);
        3:   45-block  0
call    0 returned 3
        3:   46:    if (errors!=SUCCES)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   47:        return errors;
        1:   47-block  0
        2:   48:    if (modificaOferta(adresa,o,l)!=SUCCES)
        2:   48-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   49:        return REPO_ERROR;
        1:   49-block  0
        1:   50:    return SUCCES;
        1:   50-block  0
        -:   51:}
        -:   52:
        -:   53:
function sortare called 4 returned 100% blocks executed 100%
        4:   54:Lista* sortare(Lista *l, int reverse) {
        -:   55:
        4:   56:    Lista* rez=createList();
        4:   56-block  0
call    0 returned 4
       16:   57:    for (int i = 0; i < l->len; i++)
       16:   57-block  0
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:   58:        adaugaOferta(l->oferte[i], rez);
       12:   58-block  0
call    0 returned 12
        -:   59:
       12:   60:    for (int i = 0; i < rez->len - 1; i++) {
        4:   60-block  0
        8:   60-block  1
       12:   60-block  2
branch  0 taken 8
branch  1 taken 4 (fallthrough)
       20:   61:        for (int j = i + 1; j < rez->len; j++) {
        8:   61-block  0
       12:   61-block  1
       20:   61-block  2
branch  0 taken 12
branch  1 taken 8 (fallthrough)
       12:   62:            int cmp = (reverse) ? (rez->oferte[i].pret < rez->oferte[j].pret) : (rez->oferte[i].pret > rez->oferte[j].pret);
       12:   62-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 6
        6:   62-block  1
        6:   62-block  2
       12:   63:            if (cmp) {
       12:   63-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 7
        5:   64:                Oferta aux = rez->oferte[i];
        5:   65:                rez->oferte[i] = rez->oferte[j];
        5:   66:                rez->oferte[j] = aux;
        5:   66-block  0
        7:   67:            } else if (rez->oferte[i].pret == rez->oferte[j].pret) {
        7:   67-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2:   68:                cmp = (reverse) ? (strcmp(rez->oferte[i].tip, rez->oferte[j].tip) < 0) : (strcmp(rez->oferte[i].tip, rez->oferte[j].tip) > 0);
        2:   68-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   68-block  1
        1:   68-block  2
        2:   69:                if (cmp) {
        2:   69-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   70:                    Oferta aux = rez->oferte[i];
        1:   71:                    rez->oferte[i] = rez->oferte[j];
        1:   72:                    rez->oferte[j] = aux;
        1:   72-block  0
        -:   73:                }
        -:   74:            }
        -:   75:        }
        -:   76:    }
        4:   77:    return rez;
        4:   77-block  0
        -:   78:}
function filtrareDupaPret called 2 returned 100% blocks executed 100%
        2:   79:Lista* filtrareDupaPret(float pret,Lista* l) {
        2:   80:    Lista* rez=createList();
        2:   80-block  0
call    0 returned 2
        2:   81:    if (pret<0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   82:        destroyList(rez);
        1:   82-block  0
call    0 returned 1
        1:   83:        return NULL;
        -:   84:    }
        4:   85:    for (int i = 0; i < l->len; i++)
        1:   85-block  0
        3:   85-block  1
        4:   85-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   86:        if (l->oferte[i].pret>=pret)
        3:   86-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:   87:
        2:   88:            adaugaOferta(l->oferte[i], rez);
        2:   88-block  0
call    0 returned 2
        1:   89:    return rez;
        1:   89-block  0
        -:   90:
        -:   91:}
function filtrareDupaSuprafata called 2 returned 100% blocks executed 100%
        2:   92:Lista* filtrareDupaSuprafata(float suprafata,Lista* l) {
        2:   93:    Lista* rez=createList();
        2:   93-block  0
call    0 returned 2
        2:   94:    if (suprafata<0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   95:        destroyList(rez);
        1:   95-block  0
call    0 returned 1
        1:   96:        return NULL;
        -:   97:    }
        4:   98:    for (int i = 0; i < l->len; i++)
        1:   98-block  0
        3:   98-block  1
        4:   98-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   99:        if (l->oferte[i].suprafata>=suprafata)
        3:   99-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  100:            adaugaOferta(l->oferte[i], rez);
        2:  100-block  0
call    0 returned 2
        1:  101:    return rez;
        1:  101-block  0
        -:  102:}
function filtrareDupaTip called 4 returned 100% blocks executed 100%
        4:  103:Lista* filtrareDupaTip(char tip[],Lista* l) {
        4:  104:    Lista* rez=createList();
        4:  104-block  0
call    0 returned 4
        4:  105:    if (strcmp(tip,"casa")!=0 && strcmp(tip,"apartament")!=0 && strcmp(tip,"teren")!=0) {
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  105-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  105-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        1:  106:        destroyList(rez);
        1:  106-block  0
call    0 returned 1
        1:  107:        return NULL;
        -:  108:
        -:  109:    }
       12:  110:    for (int i = 0; i < l->len; i++) {
        3:  110-block  0
        9:  110-block  1
       12:  110-block  2
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        9:  111:        if (strcmp(l->oferte[i].tip,tip)==0) {
        9:  111-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  112:            adaugaOferta(l->oferte[i], rez);
        3:  112-block  0
call    0 returned 3
        -:  113:        }
        -:  114:    }
        3:  115:    return rez;
        3:  115-block  0
        -:  116:
        -:  117:}
        -:  118:
        -:  119://Teste
        -:  120:
function testeService called 1 returned 100% blocks executed 61%
        1:  121:void testeService() {
        -:  122:    Oferta o1,o2,o3;
        1:  123:    o1.pret=2;
        1:  124:    o1.suprafata=2;
        1:  125:    strcpy(o1.tip,"apartament");
        1:  126:    strcpy(o1.adresa,"adresa1");
        1:  127:    o2.pret=4;
        1:  128:    o2.suprafata=1;
        1:  129:    strcpy(o2.tip,"casa");
        1:  130:    strcpy(o2.adresa,"adresa2");
        1:  131:    o3.pret=1;
        1:  132:    o3.suprafata=3;
        1:  133:    strcpy(o3.tip,"teren");
        1:  134:    strcpy(o3.adresa,"adresa3");
        1:  135:    Lista* l=createList();
        1:  135-block  0
call    0 returned 1
        -:  136:
        -:  137:
        -:  138:    //test adaugaOfertaService
        -:  139:
       1*:  140:    assert(adaugaOfertaService(o1.adresa,o1.pret,o1.tip,o1.suprafata,l)==SUCCES);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  140-block  0
call    3 never executed
       1*:  141:    assert(l->len==1);
        1:  141-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  141-block  1
call    2 never executed
       1*:  142:    assert(strcmp(l->oferte[0].adresa,o1.adresa)==0);
        1:  142-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  142-block  1
call    2 never executed
       1*:  143:    assert(strcmp(l->oferte[0].tip,o1.tip)==0);
        1:  143-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  143-block  1
call    2 never executed
       1*:  144:    assert(l->oferte[0].pret==o1.pret);
        1:  144-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  144-block  1
call    2 never executed
       1*:  145:    assert(l->oferte[0].suprafata==o1.suprafata);
        1:  145-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  145-block  1
call    2 never executed
       1*:  146:    assert(adaugaOfertaService(o2.adresa,o2.pret,o2.tip,o2.suprafata,l)==SUCCES);
        1:  146-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  146-block  1
call    3 never executed
       1*:  147:    assert(l->len==2);
        1:  147-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  147-block  1
call    2 never executed
       1*:  148:    assert(strcmp(l->oferte[1].adresa,o2.adresa)==0);
        1:  148-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  148-block  1
call    2 never executed
       1*:  149:    assert(strcmp(l->oferte[1].tip,o2.tip)==0);
        1:  149-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  149-block  1
call    2 never executed
       1*:  150:    assert(l->oferte[1].pret==o2.pret);
        1:  150-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  150-block  1
call    2 never executed
       1*:  151:    assert(l->oferte[1].suprafata==o2.suprafata);
        1:  151-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  151-block  1
call    2 never executed
       1*:  152:    assert(adaugaOfertaService(o3.adresa,o3.pret,o3.tip,o3.suprafata,l)==SUCCES);
        1:  152-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  152-block  1
call    3 never executed
       1*:  153:    assert(l->len==3);
        1:  153-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  153-block  1
call    2 never executed
       1*:  154:    assert(strcmp(l->oferte[2].adresa,o3.adresa)==0);
        1:  154-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  154-block  1
call    2 never executed
       1*:  155:    assert(strcmp(l->oferte[2].tip,o3.tip)==0);
        1:  155-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  155-block  1
call    2 never executed
       1*:  156:    assert(l->oferte[2].pret==o3.pret);
        1:  156-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  156-block  1
call    2 never executed
       1*:  157:    assert(l->oferte[2].suprafata==o3.suprafata);
        1:  157-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  157-block  1
call    2 never executed
       1*:  158:    assert(adaugaOfertaService(o1.adresa,o1.pret,o1.tip,o1.suprafata,l)==REPO_ERROR);
        1:  158-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  158-block  1
call    3 never executed
       1*:  159:    assert(adaugaOfertaService("",-1,"altceva",-1,l) & (TIP_INVALID + SUPRAFATA_INVALIDA + PRET_INVALID + ADRESA_INVALIDA));
        1:  159-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  159-block  1
call    3 never executed
        -:  160:
        -:  161:    //test stergeOfertaService
        -:  162:
       1*:  163:    assert(stergeOfertaService(o1.adresa,l)==SUCCES);
        1:  163-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  163-block  1
call    3 never executed
       1*:  164:    assert(l->len==2);
        1:  164-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  164-block  1
call    2 never executed
        3:  165:    for (int i = 0;i<l->len;i++)
        1:  165-block  0
        2:  165-block  1
        3:  165-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
       2*:  166:        assert(strcmp(l->oferte[i].adresa,o1.adresa)!=0);
        2:  166-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  166-block  1
call    2 never executed
       1*:  167:    assert(stergeOfertaService(o1.adresa,l)==REPO_ERROR);
        1:  167-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  167-block  1
call    3 never executed
       1*:  168:    assert(stergeOfertaService("",l)==ADRESA_INVALIDA);
        1:  168-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  168-block  1
call    3 never executed
        -:  169:    //test modificaOfertaService
        -:  170:
       1*:  171:    assert(modificaOfertaService(o2.adresa,o1.adresa,o1.suprafata,o1.tip,o1.pret,l)==SUCCES);
        1:  171-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  171-block  1
call    3 never executed
       1*:  172:    assert(l->len==2);
        1:  172-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  172-block  1
call    2 never executed
       1*:  173:    assert(strcmp(l->oferte[0].adresa,o1.adresa)==0);
        1:  173-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  173-block  1
call    2 never executed
       1*:  174:    assert(strcmp(l->oferte[0].tip,o1.tip)==0);
        1:  174-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  174-block  1
call    2 never executed
       1*:  175:    assert(l->oferte[0].pret==o1.pret);
        1:  175-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  175-block  1
call    2 never executed
       1*:  176:    assert(l->oferte[0].suprafata==o1.suprafata);
        1:  176-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  176-block  1
call    2 never executed
       1*:  177:    assert(modificaOfertaService("",o1.adresa,o1.suprafata,o1.tip,o1.pret,l)==ADRESA_INVALIDA);
        1:  177-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  177-block  1
call    3 never executed
       1*:  178:    assert(modificaOfertaService(o2.adresa,"",-1,"",-1,l) & (TIP_INVALID + ADRESA_INVALIDA + SUPRAFATA_INVALIDA + PRET_INVALID));
        1:  178-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  178-block  1
call    3 never executed
       1*:  179:    assert(modificaOfertaService("salut","ok",1,"casa",1,l)==REPO_ERROR);
        1:  179-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  179-block  1
call    3 never executed
        -:  180:
        -:  181:
        -:  182:    //test filtrareDupaTip
        -:  183:
        1:  184:    destroyList(l);
        1:  184-block  0
call    0 returned 1
        1:  185:    l=createList();
call    0 returned 1
        1:  186:    adaugaOfertaService(o1.adresa,o1.pret,o1.tip,o1.suprafata,l);
call    0 returned 1
       1*:  187:    assert(l->len==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  187-block  0
call    2 never executed
       1*:  188:    assert(strcmp(l->oferte[0].adresa,o1.adresa)==0);
        1:  188-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  188-block  1
call    2 never executed
       1*:  189:    assert(strcmp(l->oferte[0].tip,o1.tip)==0);
        1:  189-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  189-block  1
call    2 never executed
       1*:  190:    assert(l->oferte[0].pret==o1.pret);
        1:  190-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  190-block  1
call    2 never executed
       1*:  191:    assert(l->oferte[0].suprafata==o1.suprafata);
        1:  191-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  191-block  1
call    2 never executed
        1:  192:    adaugaOfertaService(o2.adresa,o2.pret,o2.tip,o2.suprafata,l);
        1:  192-block  0
call    0 returned 1
       1*:  193:    assert(l->len==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  193-block  0
call    2 never executed
       1*:  194:    assert(strcmp(l->oferte[1].adresa,o2.adresa)==0);
        1:  194-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  194-block  1
call    2 never executed
       1*:  195:    assert(strcmp(l->oferte[1].tip,o2.tip)==0);
        1:  195-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  195-block  1
call    2 never executed
       1*:  196:    assert(l->oferte[1].pret==o2.pret);
        1:  196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  196-block  1
call    2 never executed
       1*:  197:    assert(l->oferte[1].suprafata==o2.suprafata);
        1:  197-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  197-block  1
call    2 never executed
        1:  198:    adaugaOfertaService(o3.adresa,o3.pret,o3.tip,o3.suprafata,l);
        1:  198-block  0
call    0 returned 1
       1*:  199:    assert(l->len==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  199-block  0
call    2 never executed
       1*:  200:    assert(strcmp(l->oferte[2].adresa,o3.adresa)==0);
        1:  200-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  200-block  1
call    2 never executed
       1*:  201:    assert(strcmp(l->oferte[2].tip,o3.tip)==0);
        1:  201-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  201-block  1
call    2 never executed
       1*:  202:    assert(l->oferte[2].pret==o3.pret);
        1:  202-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  202-block  1
call    2 never executed
       1*:  203:    assert(l->oferte[2].suprafata==o3.suprafata);
        1:  203-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  203-block  1
call    2 never executed
        -:  204:
        1:  205:    Lista *filtrate = filtrareDupaTip("casa", l);
        1:  205-block  0
call    0 returned 1
       1*:  206:    assert(filtrate->len==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  206-block  0
call    2 never executed
       1*:  207:    assert(strcmp(filtrate->oferte[0].adresa,o2.adresa)==0);
        1:  207-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  207-block  1
call    2 never executed
       1*:  208:    assert(strcmp(filtrate->oferte[0].tip,o2.tip)==0);
        1:  208-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  208-block  1
call    2 never executed
       1*:  209:    assert(filtrate->oferte[0].pret==o2.pret);
        1:  209-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  209-block  1
call    2 never executed
       1*:  210:    assert(filtrate->oferte[0].suprafata==o2.suprafata);
        1:  210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  210-block  1
call    2 never executed
        1:  211:    destroyList(filtrate);
        1:  211-block  0
call    0 returned 1
        1:  212:    filtrate=filtrareDupaTip("apartament",l);
call    0 returned 1
       1*:  213:    assert(filtrate->len==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  213-block  0
call    2 never executed
       1*:  214:    assert(strcmp(filtrate->oferte[0].adresa,o1.adresa)==0);
        1:  214-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  214-block  1
call    2 never executed
       1*:  215:    assert(strcmp(filtrate->oferte[0].tip,o1.tip)==0);
        1:  215-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  215-block  1
call    2 never executed
       1*:  216:    assert(filtrate->oferte[0].pret==o1.pret);
        1:  216-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  216-block  1
call    2 never executed
       1*:  217:    assert(filtrate->oferte[0].suprafata==o1.suprafata);
        1:  217-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  217-block  1
call    2 never executed
        1:  218:    destroyList(filtrate);
        1:  218-block  0
call    0 returned 1
        1:  219:    filtrate=filtrareDupaTip("teren",l);
call    0 returned 1
       1*:  220:    assert(filtrate->len==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  220-block  0
call    2 never executed
       1*:  221:    assert(strcmp(filtrate->oferte[0].adresa,o3.adresa)==0);
        1:  221-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  221-block  1
call    2 never executed
       1*:  222:    assert(strcmp(filtrate->oferte[0].tip,o3.tip)==0);
        1:  222-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  222-block  1
call    2 never executed
       1*:  223:    assert(filtrate->oferte[0].pret==o3.pret);
        1:  223-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  223-block  1
call    2 never executed
       1*:  224:    assert(filtrate->oferte[0].suprafata==o3.suprafata);
        1:  224-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  224-block  1
call    2 never executed
        1:  225:    destroyList(filtrate);
        1:  225-block  0
call    0 returned 1
        1:  226:    filtrate=filtrareDupaTip("altceva",l);
call    0 returned 1
       1*:  227:    assert(filtrate==NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  227-block  0
call    2 never executed
        -:  228:    //test sortare
        -:  229:
        1:  230:    filtrate=sortare(l,0);
        1:  230-block  0
call    0 returned 1
       1*:  231:    assert(filtrate->len==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  231-block  0
call    2 never executed
       1*:  232:    assert(strcmp(filtrate->oferte[0].adresa,o3.adresa)==0);
        1:  232-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  232-block  1
call    2 never executed
       1*:  233:    assert(strcmp(filtrate->oferte[1].adresa,o1.adresa)==0);
        1:  233-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  233-block  1
call    2 never executed
       1*:  234:    assert(strcmp(filtrate->oferte[2].adresa,o2.adresa)==0);
        1:  234-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  234-block  1
call    2 never executed
        1:  235:    destroyList(filtrate);
        1:  235-block  0
call    0 returned 1
        1:  236:    filtrate=sortare(l,1);
call    0 returned 1
       1*:  237:    assert(filtrate->len==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  237-block  0
call    2 never executed
       1*:  238:    assert(strcmp(filtrate->oferte[0].adresa,o2.adresa)==0);
        1:  238-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  238-block  1
call    2 never executed
       1*:  239:    assert(strcmp(filtrate->oferte[1].adresa,o1.adresa)==0);
        1:  239-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  239-block  1
call    2 never executed
       1*:  240:    assert(strcmp(filtrate->oferte[2].adresa,o3.adresa)==0);
        1:  240-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  240-block  1
call    2 never executed
        1:  241:    destroyList(filtrate);
        1:  241-block  0
call    0 returned 1
        1:  242:    l->oferte[2].pret=l->oferte[1].pret;
        1:  243:    filtrate=sortare(l,0);
call    0 returned 1
       1*:  244:    assert(filtrate->len==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  244-block  0
call    2 never executed
       1*:  245:    assert(strcmp(filtrate->oferte[0].adresa,o1.adresa)==0);
        1:  245-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  245-block  1
call    2 never executed
       1*:  246:    assert(strcmp(filtrate->oferte[1].adresa,o2.adresa)==0);
        1:  246-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  246-block  1
call    2 never executed
       1*:  247:    assert(strcmp(filtrate->oferte[2].adresa,o3.adresa)==0);
        1:  247-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  247-block  1
call    2 never executed
        1:  248:    destroyList(filtrate);
        1:  248-block  0
call    0 returned 1
        1:  249:    filtrate=sortare(l,1);
call    0 returned 1
       1*:  250:    assert(filtrate->len==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  250-block  0
call    2 never executed
       1*:  251:    assert(strcmp(filtrate->oferte[0].adresa,o3.adresa)==0);
        1:  251-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  251-block  1
call    2 never executed
       1*:  252:    assert(strcmp(filtrate->oferte[1].adresa,o2.adresa)==0);
        1:  252-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  252-block  1
call    2 never executed
       1*:  253:    assert(strcmp(filtrate->oferte[2].adresa,o1.adresa)==0);
        1:  253-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  253-block  1
call    2 never executed
        1:  254:    destroyList(filtrate);
        1:  254-block  0
call    0 returned 1
        -:  255:    //test filtrare dupa pret
        -:  256:
        1:  257:    filtrate=filtrareDupaPret(-1,l);
call    0 returned 1
       1*:  258:    assert(filtrate==NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  258-block  0
call    2 never executed
        1:  259:    filtrate=filtrareDupaPret(3,l);
        1:  259-block  0
call    0 returned 1
       1*:  260:    assert(filtrate->len==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  260-block  0
call    2 never executed
       1*:  261:    assert(filtrate->oferte[0].pret==4 && strcmp(filtrate->oferte[0].adresa,o2.adresa)==0);
        1:  261-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  261-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  261-block  2
    %%%%%:  261-block  3
call    4 never executed
       1*:  262:    assert(filtrate->oferte[1].pret==4 && strcmp(filtrate->oferte[1].adresa,o3.adresa)==0);
        1:  262-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  262-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  262-block  2
    %%%%%:  262-block  3
call    4 never executed
        -:  263:
        -:  264:    //test filtrare dupa suprafata
        -:  265:
        1:  266:    filtrate=filtrareDupaSuprafata(-1,l);
        1:  266-block  0
call    0 returned 1
       1*:  267:    assert(filtrate==NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  267-block  0
call    2 never executed
        1:  268:    filtrate=filtrareDupaSuprafata(2,l);
        1:  268-block  0
call    0 returned 1
       1*:  269:    assert(filtrate->len==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  269-block  0
call    2 never executed
       1*:  270:    assert(strcmp(filtrate->oferte[0].adresa,o1.adresa)==0 && strcmp(filtrate->oferte[1].adresa,o3.adresa)==0);
        1:  270-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  270-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  270-block  2
    %%%%%:  270-block  3
call    4 never executed
        -:  271:
        1:  272:}
