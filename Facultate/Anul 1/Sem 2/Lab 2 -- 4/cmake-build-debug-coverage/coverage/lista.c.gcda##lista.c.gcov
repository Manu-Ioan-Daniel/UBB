        -:    0:Source:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/domeniu/lista.c
        -:    0:Graph:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/domeniu/lista.c.gcno
        -:    0:Data:/mnt/c/Users/Lenovo/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2 -- 4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/domeniu/lista.c.gcda
        -:    0:Runs:1
        -:    1:#include "lista.h"
        -:    2:
        -:    3:#include <string.h>
        -:    4:
function resizeList called 2 returned 100% blocks executed 100%
        2:    5:void resizeList(Lista* l){
        -:    6:    
        2:    7:    l->capacitate*=2;
        2:    8:    Oferta* aux=malloc(l->capacitate*sizeof(Oferta));
      112:    9:    for(int i=0;i<l->len;i++)
        2:    9-block  0
      112:    9-block  1
branch  0 taken 110
branch  1 taken 2 (fallthrough)
      110:   10:        aux[i]=l->oferte[i];
      110:   10-block  0
        2:   11:    free(l->oferte);
        2:   12:    l->oferte=aux;
        2:   13:}
function createList called 18 returned 100% blocks executed 100%
       18:   14:Lista* createList(){
       18:   15:    Lista* l=malloc(sizeof(Lista));
       18:   16:    l->len=0;
       18:   17:    l->capacitate=INIT_CAPACITY;
       18:   18:    l->oferte=malloc(l->capacitate*sizeof(Oferta));
       18:   19:    return l;
       18:   19-block  0
        -:   20:}
function destroyList called 15 returned 100% blocks executed 100%
       15:   21:void destroyList(Lista* l)
        -:   22:{
       15:   23:    free(l->oferte);
       15:   24:    free(l);
       15:   25:}
        -:   26:
        -:   27:
        -:   28://Teste
        -:   29:
function testList called 1 returned 100% blocks executed 77%
        1:   30:void testList() {
        1:   31:    Lista* l=createList();
        1:   31-block  0
call    0 returned 1
       1*:   32:    assert(l->capacitate == INIT_CAPACITY);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   32-block  0
call    2 never executed
       1*:   33:    assert(l->len==0);
        1:   33-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   33-block  1
call    2 never executed
       11:   34:    for (int i = 0;i<10;i++) {
        1:   34-block  0
       11:   34-block  1
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:   35:        l->oferte[i].pret=i;
       10:   36:        l->oferte[i].suprafata=i;
       10:   37:        strcat(l->oferte[i].tip,"apartament");
       10:   38:        strcat(l->oferte[i].adresa,"mama");
       10:   39:        l->len+=1;
       10:   39-block  0
        -:   40:    }
        1:   41:    resizeList(l);
        1:   41-block  0
call    0 returned 1
       1*:   42:    assert(l->capacitate == 2*INIT_CAPACITY);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   42-block  0
call    2 never executed
        1:   43:    destroyList(l);
        1:   43-block  0
call    0 returned 1
        1:   44:}
