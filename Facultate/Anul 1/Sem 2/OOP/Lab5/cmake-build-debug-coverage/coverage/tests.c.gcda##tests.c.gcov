        -:    0:Source:/mnt/c/Users/Deny/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab5/testing/tests.c
        -:    0:Graph:/mnt/c/Users/Deny/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab5/cmake-build-debug-coverage/CMakeFiles/Lab5.dir/testing/tests.c.gcno
        -:    0:Data:/mnt/c/Users/Deny/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab5/cmake-build-debug-coverage/CMakeFiles/Lab5.dir/testing/tests.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Andra Mateș on 17.03.2025.
        -:    3://
        -:    4:#include "tests.h"
        -:    5:#include "../utils/list.h"
        -:    6:#include "../domain/expense.h"
        -:    7:#include "../validation/validator.h"
        -:    8:#include "../infrastructure/repo.h"
        -:    9:#include "../business/service.h"
        -:   10:
        -:   11:#include <stdio.h>
        -:   12:#include <string.h>
        -:   13:#include <assert.h>
        -:   14:
function testList called 1 returned 100% blocks executed 73%
        1:   15:void testList() {
        1:   16:    List* list = createList(2, (DestroyFunc) destroyExpense, (CopyFunc) copyExpense);
        1:   16-block  0
call    0 returned 1
       1*:   17:    assert(list != NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   17-block  0
call    2 never executed
       1*:   18:    assert(getLength(list) == 0);
        1:   18-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   18-block  1
call    3 never executed
       1*:   19:    assert(getCapacity(list) == 2);
        1:   19-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   19-block  1
call    3 never executed
        -:   20:
        1:   21:    Expense* exp1 = createExpense(1, 100.0, "apa");
        1:   21-block  0
call    0 returned 1
        1:   22:    Expense* exp2 = createExpense(2, 200.0, "gaz");
call    0 returned 1
        1:   23:    add(list, exp1);
call    0 returned 1
        1:   24:    add(list, exp2);
call    0 returned 1
        -:   25:
       1*:   26:    assert(getLength(list) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   26-block  0
call    3 never executed
       1*:   27:    assert(get(list, 0) == exp1);
        1:   27-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   27-block  1
call    3 never executed
       1*:   28:    assert(get(list, 1) == exp2);
        1:   28-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   28-block  1
call    3 never executed
        -:   29:
        1:   30:    Expense* exp3 = createExpense(3, 150.0, "incalzire");
        1:   30-block  0
call    0 returned 1
        1:   31:    add(list, exp3);
call    0 returned 1
       1*:   32:    assert(getLength(list) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   32-block  0
call    3 never executed
       1*:   33:    assert(getCapacity(list) == 4);
        1:   33-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   33-block  1
call    3 never executed
        -:   34:
        1:   35:    delete(list, 1);
        1:   35-block  0
call    0 returned 1
       1*:   36:    assert(getLength(list) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   36-block  0
call    3 never executed
       1*:   37:    assert(get(list, 0) == exp1);
        1:   37-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   37-block  1
call    3 never executed
       1*:   38:    assert(get(list, 1) == exp3);
        1:   38-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   38-block  1
call    3 never executed
        -:   39:
        1:   40:    List* copy = copyList(list);
        1:   40-block  0
call    0 returned 1
       1*:   41:    assert(copy != NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   41-block  0
call    2 never executed
       1*:   42:    assert(getLength(copy) == getLength(list));
        1:   42-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   42-block  1
call    4 never executed
       1*:   43:    assert(getCapacity(copy) == getCapacity(list));
        1:   43-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   43-block  1
call    4 never executed
        -:   44:
        -:   45:    // Verifică dacă elementele copiate sunt copii separate (nu aceleași adrese)
       1*:   46:    assert(copy->elems[0] != list->elems[0]);
        1:   46-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   46-block  1
call    2 never executed
       1*:   47:    assert(copy->elems[1] != list->elems[1]);
        1:   47-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   47-block  1
call    2 never executed
        -:   48:
        1:   49:    destroyList(list);
        1:   49-block  0
call    0 returned 1
        1:   50:    destroyList(copy);
call    0 returned 1
        1:   51:    printf("test list passed!\n");
call    0 returned 1
        1:   52:}
        -:   53:
        -:   54:
function testDomain called 1 returned 100% blocks executed 74%
        1:   55:void testDomain() {
        1:   56:    Expense* e1 = createExpense(10, 100.5, "apa");
        1:   56-block  0
call    0 returned 1
       1*:   57:    assert(e1 != NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  0
call    2 never executed
       1*:   58:    assert(getApNumber(e1) == 10);
        1:   58-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   58-block  1
call    3 never executed
       1*:   59:    assert(getSum(e1) == 100.5);
        1:   59-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   59-block  1
call    3 never executed
       1*:   60:    assert(strcmp(getType(e1), "apa") == 0);
        1:   60-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   60-block  1
call    3 never executed
        -:   61:
        1:   62:    Expense* e2 = copyExpense(e1);
        1:   62-block  0
call    0 returned 1
       1*:   63:    assert(e2 != NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   63-block  0
call    2 never executed
       1*:   64:    assert(getApNumber(e2) == getApNumber(e1));
        1:   64-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   64-block  1
call    4 never executed
       1*:   65:    assert(getSum(e2) == getSum(e1));
        1:   65-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   65-block  1
call    4 never executed
       1*:   66:    assert(strcmp(getType(e2), getType(e1)) == 0);
        1:   66-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   66-block  1
call    4 never executed
        -:   67:
        1:   68:    destroyExpense(e1);
        1:   68-block  0
call    0 returned 1
        1:   69:    destroyExpense(e2);
call    0 returned 1
        -:   70:
        1:   71:    printf("test domain passed!\n");
call    0 returned 1
        1:   72:}
        -:   73:
        -:   74:
function testValidator called 1 returned 100% blocks executed 73%
        1:   75:void testValidator() {
        -:   76:    Error error;
        -:   77:
        1:   78:    Expense* e1 = createExpense(1, 200.0, "apa");
        1:   78-block  0
call    0 returned 1
       1*:   79:    assert(validateExpense(e1, &error) == true);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   79-block  0
call    3 never executed
       1*:   80:    assert(strlen(error.errorMessage) == 0);
        1:   80-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   80-block  1
call    2 never executed
        1:   81:    destroyExpense(e1);
        1:   81-block  0
call    0 returned 1
        -:   82:
        1:   83:    Expense* e2 = createExpense(-1, 200.0, "gaz");
call    0 returned 1
       1*:   84:    assert(validateExpense(e2, &error) == false);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   84-block  0
call    3 never executed
       1*:   85:    assert(strstr(error.errorMessage, "nr apartament invalid") != NULL);
        1:   85-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   85-block  1
call    2 never executed
        1:   86:    destroyExpense(e2);
        1:   86-block  0
call    0 returned 1
        -:   87:
        1:   88:    Expense* e3 = createExpense(2, -50.0, "incalzire");
call    0 returned 1
       1*:   89:    assert(validateExpense(e3, &error) == false);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   89-block  0
call    3 never executed
       1*:   90:    assert(strstr(error.errorMessage, "suma invalida") != NULL);
        1:   90-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   90-block  1
call    2 never executed
        1:   91:    destroyExpense(e3);
        1:   91-block  0
call    0 returned 1
        -:   92:
        1:   93:    Expense* e4 = createExpense(3, 100.0, "electricitate");
call    0 returned 1
       1*:   94:    assert(validateExpense(e4, &error) == false);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   94-block  0
call    3 never executed
       1*:   95:    assert(strstr(error.errorMessage, "tip invalid") != NULL);
        1:   95-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   95-block  1
call    2 never executed
        1:   96:    destroyExpense(e4);
        1:   96-block  0
call    0 returned 1
        -:   97:
        1:   98:    printf("test validator passed!\n");
call    0 returned 1
        1:   99:}
        -:  100:
function testRepo called 1 returned 100% blocks executed 75%
        1:  101:void testRepo() {
        -:  102:    Error error;
        1:  103:    Repo* repo = createRepo();
        1:  103-block  0
call    0 returned 1
       1*:  104:    assert(getRepoLength(repo) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  104-block  0
call    3 never executed
        -:  105:
        1:  106:    Expense* e1 = createExpense(1, 100.0, "apa");
        1:  106-block  0
call    0 returned 1
        1:  107:    Expense* e2 = createExpense(2, 200.0, "gaz");
call    0 returned 1
        1:  108:    Expense* e3 = createExpense(1, 150.0, "gaz");
call    0 returned 1
        -:  109:
       1*:  110:    assert(addExpense(repo, e1, &error) == true);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  110-block  0
call    3 never executed
       1*:  111:    assert(addExpense(repo, e2, &error) == true);
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  111-block  1
call    3 never executed
       1*:  112:    assert(addExpense(repo, e3, &error) == true);
        1:  112-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  112-block  1
call    3 never executed
        -:  113:
        -:  114:
       1*:  115:    assert(getRepoLength(repo) == 3);
        1:  115-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  115-block  1
call    3 never executed
        -:  116:
        1:  117:    Expense* duplicate = createExpense(1, 120.0, "apa");
        1:  117-block  0
call    0 returned 1
       1*:  118:    assert(addExpense(repo, duplicate, &error) == false);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  118-block  0
call    3 never executed
        1:  119:    destroyExpense(duplicate);
        1:  119-block  0
call    0 returned 1
        -:  120:
       1*:  121:    assert(searchPos(repo, 1, "apa") != -1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  121-block  0
call    3 never executed
       1*:  122:    assert(searchPos(repo, 2, "gaz") != -1);
        1:  122-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  122-block  1
call    3 never executed
       1*:  123:    assert(searchPos(repo, 3, "apa") == -1);
        1:  123-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  123-block  1
call    3 never executed
        -:  124:
        -:  125:
        1:  126:    Expense* newExpense = createExpense(1, 180.0, "apa");
        1:  126-block  0
call    0 returned 1
       1*:  127:    assert(modifyExpense(repo, newExpense, 2, "gaz", &error) == false);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  127-block  0
call    3 never executed
       1*:  128:    assert(modifyExpense(repo, newExpense, 1, "apa", &error) == true);
        1:  128-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  128-block  1
call    3 never executed
       1*:  129:    assert(getSum(get(repo->expenses, searchPos(repo, 1, "apa"))) == 180.0);
        1:  129-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  129-block  1
call    5 never executed
        1:  130:    destroyExpense(newExpense);
        1:  130-block  0
call    0 returned 1
        -:  131:
       1*:  132:    assert(deleteExpense(repo, e2, &error) == true);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  132-block  0
call    3 never executed
       1*:  133:    assert(getRepoLength(repo) == 2);
        1:  133-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  133-block  1
call    3 never executed
       1*:  134:    assert(searchPos(repo, 2, "gaz") == -1);
        1:  134-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  134-block  1
call    3 never executed
        -:  135:
        1:  136:    destroyRepo(repo);
        1:  136-block  0
call    0 returned 1
        1:  137:    destroyExpense(e1);
call    0 returned 1
        1:  138:    destroyExpense(e2);
call    0 returned 1
        1:  139:    destroyExpense(e3);
call    0 returned 1
        -:  140:
        1:  141:    printf("test repo passed!\n");
call    0 returned 1
        1:  142:}
        -:  143:
function testFilterExpensesByAp called 1 returned 100% blocks executed 86%
        1:  144:void testFilterExpensesByAp() {
        -:  145:    Error error;
        1:  146:    Service* service = createService();
        1:  146-block  0
call    0 returned 1
        -:  147:
        1:  148:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  149:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  150:    addExpenseService(service, 1, 150.0, "incalzire", &error);
call    0 returned 1
        1:  151:    addExpenseService(service, 2, 250.0, "canal", &error);
call    0 returned 1
        -:  152:
        1:  153:    List* filteredByAp1 = filterExpensesByAp(service, 1);
call    0 returned 1
       1*:  154:    assert(getLength(filteredByAp1) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  154-block  0
call    3 never executed
        1:  155:    destroyList(filteredByAp1);
        1:  155-block  0
call    0 returned 1
        -:  156:
        1:  157:    List* filteredByAp2 = filterExpensesByAp(service, 2);
call    0 returned 1
       1*:  158:    assert(getLength(filteredByAp2) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  158-block  0
call    3 never executed
        1:  159:    destroyList(filteredByAp2);
        1:  159-block  0
call    0 returned 1
        -:  160:
        1:  161:    List* filteredByApNonExistent = filterExpensesByAp(service, 3);
call    0 returned 1
       1*:  162:    assert(getLength(filteredByApNonExistent) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  162-block  0
call    3 never executed
        1:  163:    destroyList(filteredByApNonExistent);
        1:  163-block  0
call    0 returned 1
        -:  164:
        1:  165:    destroyService(service);
call    0 returned 1
        1:  166:}
        -:  167:
function testFilterExpensesBySum called 1 returned 100% blocks executed 86%
        1:  168:void testFilterExpensesBySum() {
        -:  169:    Error error;
        1:  170:    Service* service = createService();
        1:  170-block  0
call    0 returned 1
        -:  171:
        1:  172:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  173:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  174:    addExpenseService(service, 1, 150.0, "incalzire", &error);
call    0 returned 1
        1:  175:    addExpenseService(service, 2, 200.0, "canal", &error);
call    0 returned 1
        -:  176:
        1:  177:    List* filteredBySum200 = filterExpensesBySum(service, 200.0);
call    0 returned 1
       1*:  178:    assert(getLength(filteredBySum200) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  178-block  0
call    3 never executed
        1:  179:    destroyList(filteredBySum200);
        1:  179-block  0
call    0 returned 1
        -:  180:
        1:  181:    List* filteredBySum150 = filterExpensesBySum(service, 150.0);
call    0 returned 1
       1*:  182:    assert(getLength(filteredBySum150) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  182-block  0
call    3 never executed
        1:  183:    destroyList(filteredBySum150);
        1:  183-block  0
call    0 returned 1
        -:  184:
        1:  185:    List* filteredBySumNonExistent = filterExpensesBySum(service, 500.0);
call    0 returned 1
       1*:  186:    assert(getLength(filteredBySumNonExistent) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  186-block  0
call    3 never executed
        1:  187:    destroyList(filteredBySumNonExistent);
        1:  187-block  0
call    0 returned 1
        -:  188:
        1:  189:    destroyService(service);
call    0 returned 1
        1:  190:}
        -:  191:
function testFilterExpensesByType called 1 returned 100% blocks executed 86%
        1:  192:void testFilterExpensesByType() {
        -:  193:    Error error;
        1:  194:    Service* service = createService();
        1:  194-block  0
call    0 returned 1
        -:  195:
        1:  196:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  197:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  198:    addExpenseService(service, 1, 150.0, "incalzire", &error);
call    0 returned 1
        1:  199:    addExpenseService(service, 2, 250.0, "canal", &error);
call    0 returned 1
        -:  200:
        1:  201:    List* filteredByTypeApa = filterExpensesByType(service, "apa");
call    0 returned 1
       1*:  202:    assert(getLength(filteredByTypeApa) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  202-block  0
call    3 never executed
        1:  203:    destroyList(filteredByTypeApa);
        1:  203-block  0
call    0 returned 1
        -:  204:
        1:  205:    List* filteredByTypeGaz = filterExpensesByType(service, "gaz");
call    0 returned 1
       1*:  206:    assert(getLength(filteredByTypeGaz) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  206-block  0
call    3 never executed
        1:  207:    destroyList(filteredByTypeGaz);
        1:  207-block  0
call    0 returned 1
        -:  208:
        1:  209:    List* filteredByTypeNonExistent = filterExpensesByType(service, "electricitate");
call    0 returned 1
       1*:  210:    assert(getLength(filteredByTypeNonExistent) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  210-block  0
call    3 never executed
        1:  211:    destroyList(filteredByTypeNonExistent);
        1:  211-block  0
call    0 returned 1
        -:  212:
        1:  213:    destroyService(service);
call    0 returned 1
        1:  214:}
        -:  215:
function testSortExpensesBySumAsc called 1 returned 100% blocks executed 82%
        1:  216:void testSortExpensesBySumAsc() {
        -:  217:    Error error;
        1:  218:    Service* service = createService();
        1:  218-block  0
call    0 returned 1
        -:  219:
        1:  220:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  221:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  222:    addExpenseService(service, 1, 150.0, "incalzire", &error);
call    0 returned 1
        1:  223:    addExpenseService(service, 2, 250.0, "canal", &error);
call    0 returned 1
        -:  224:
        1:  225:    List* sortedBySumAsc = sortExpenses(service, 1, true);
call    0 returned 1
       1*:  226:    assert(getLength(sortedBySumAsc) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  226-block  0
call    3 never executed
       1*:  227:    assert(getSum(get(sortedBySumAsc, 0)) == 100.0);
        1:  227-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  227-block  1
call    4 never executed
       1*:  228:    assert(getSum(get(sortedBySumAsc, 1)) == 150.0);
        1:  228-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  228-block  1
call    4 never executed
       1*:  229:    assert(getSum(get(sortedBySumAsc, 2)) == 200.0);
        1:  229-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  229-block  1
call    4 never executed
       1*:  230:    assert(getSum(get(sortedBySumAsc, 3)) == 250.0);
        1:  230-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  230-block  1
call    4 never executed
        1:  231:    destroyList(sortedBySumAsc);
        1:  231-block  0
call    0 returned 1
        -:  232:
        1:  233:    destroyService(service);
call    0 returned 1
        1:  234:}
        -:  235:
function testSortExpensesBySumDesc called 1 returned 100% blocks executed 82%
        1:  236:void testSortExpensesBySumDesc() {
        -:  237:    Error error;
        1:  238:    Service* service = createService();
        1:  238-block  0
call    0 returned 1
        -:  239:
        1:  240:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  241:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  242:    addExpenseService(service, 1, 150.0, "incalzire", &error);
call    0 returned 1
        1:  243:    addExpenseService(service, 2, 250.0, "canal", &error);
call    0 returned 1
        -:  244:
        -:  245:
        1:  246:    List* sortedBySumDesc = sortExpenses(service, 1, false);
call    0 returned 1
       1*:  247:    assert(getLength(sortedBySumDesc) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  247-block  0
call    3 never executed
       1*:  248:    assert(getSum(get(sortedBySumDesc, 0)) == 250.0);
        1:  248-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  248-block  1
call    4 never executed
       1*:  249:    assert(getSum(get(sortedBySumDesc, 1)) == 200.0);
        1:  249-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  249-block  1
call    4 never executed
       1*:  250:    assert(getSum(get(sortedBySumDesc, 2)) == 150.0);
        1:  250-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  250-block  1
call    4 never executed
       1*:  251:    assert(getSum(get(sortedBySumDesc, 3)) == 100.0);
        1:  251-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  251-block  1
call    4 never executed
        1:  252:    destroyList(sortedBySumDesc);
        1:  252-block  0
call    0 returned 1
        -:  253:
        1:  254:    destroyService(service);
call    0 returned 1
        1:  255:}
        -:  256:
function testSortExpensesByTypeAsc called 1 returned 100% blocks executed 82%
        1:  257:void testSortExpensesByTypeAsc() {
        -:  258:    Error error;
        1:  259:    Service* service = createService();
        1:  259-block  0
call    0 returned 1
        -:  260:
        1:  261:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  262:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  263:    addExpenseService(service, 1, 150.0, "canal", &error);
call    0 returned 1
        1:  264:    addExpenseService(service, 2, 250.0, "canal", &error);
call    0 returned 1
        -:  265:
        1:  266:    List* sortedByTypeAsc = sortExpenses(service, 2, true);
call    0 returned 1
       1*:  267:    assert(getLength(sortedByTypeAsc) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  267-block  0
call    3 never executed
       1*:  268:    assert(strcmp(getType(get(sortedByTypeAsc, 0)), "apa") == 0);
        1:  268-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  268-block  1
call    4 never executed
       1*:  269:    assert(strcmp(getType(get(sortedByTypeAsc, 1)), "canal") == 0);
        1:  269-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  269-block  1
call    4 never executed
       1*:  270:    assert(strcmp(getType(get(sortedByTypeAsc, 2)), "canal") == 0);
        1:  270-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  270-block  1
call    4 never executed
       1*:  271:    assert(strcmp(getType(get(sortedByTypeAsc, 3)), "gaz") == 0);
        1:  271-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  271-block  1
call    4 never executed
        1:  272:    destroyList(sortedByTypeAsc);
        1:  272-block  0
call    0 returned 1
        -:  273:
        1:  274:    destroyService(service);
call    0 returned 1
        1:  275:}
        -:  276:
function testSortExpensesByTypeDesc called 1 returned 100% blocks executed 82%
        1:  277:void testSortExpensesByTypeDesc() {
        -:  278:    Error error;
        1:  279:    Service* service = createService();
        1:  279-block  0
call    0 returned 1
        -:  280:
        1:  281:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  282:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  283:    addExpenseService(service, 1, 150.0, "incalzire", &error);
call    0 returned 1
        1:  284:    addExpenseService(service, 2, 250.0, "canal", &error);
call    0 returned 1
        -:  285:
        1:  286:    List* sortedByTypeDesc = sortExpenses(service, 2, false);
call    0 returned 1
       1*:  287:    assert(getLength(sortedByTypeDesc) == 4);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  287-block  0
call    3 never executed
       1*:  288:    assert(strcmp(getType(get(sortedByTypeDesc, 0)), "incalzire") == 0);
        1:  288-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  288-block  1
call    4 never executed
       1*:  289:    assert(strcmp(getType(get(sortedByTypeDesc, 1)), "gaz") == 0);
        1:  289-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  289-block  1
call    4 never executed
       1*:  290:    assert(strcmp(getType(get(sortedByTypeDesc, 2)), "canal") == 0);
        1:  290-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  290-block  1
call    4 never executed
       1*:  291:    assert(strcmp(getType(get(sortedByTypeDesc, 3)), "apa") == 0);
        1:  291-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  291-block  1
call    4 never executed
        1:  292:    destroyList(sortedByTypeDesc);
        1:  292-block  0
call    0 returned 1
        -:  293:
        1:  294:    destroyService(service);
call    0 returned 1
        1:  295:}
        -:  296:
        -:  297:
        -:  298:
function testService called 1 returned 100% blocks executed 72%
        1:  299:void testService() {
        -:  300:    Error error;
        1:  301:    Service* service = createService();
        1:  301-block  0
call    0 returned 1
        -:  302:
       1*:  303:    assert(getRepo(service) != NULL);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  303-block  0
call    3 never executed
       1*:  304:    assert(getRepo(service)->expenses != NULL);
        1:  304-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  304-block  1
call    3 never executed
       1*:  305:    assert(getRepo(service)->expenses->length == 0);
        1:  305-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  305-block  1
call    3 never executed
        -:  306:
       1*:  307:    assert(addExpenseService(service, 1, 100.0, "apa", &error) == true);
        1:  307-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  307-block  1
call    3 never executed
       1*:  308:    assert(addExpenseService(service, 2, 200.0, "gaz", &error) == true);
        1:  308-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  308-block  1
call    3 never executed
       1*:  309:    assert(addExpenseService(service, 1, 150.0, "canal", &error) == true);
        1:  309-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  309-block  1
call    3 never executed
        -:  310:
       1*:  311:    assert(addExpenseService(service, 2, 250.0, "elec", &error) == false);
        1:  311-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  311-block  1
call    3 never executed
        -:  312:
        1:  313:    List* expenses = getExpensesService(service);
        1:  313-block  0
call    0 returned 1
       1*:  314:    assert(getLength(expenses) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  314-block  0
call    3 never executed
        1:  315:    destroyList(expenses);
        1:  315-block  0
call    0 returned 1
        -:  316:
        -:  317:
       1*:  318:    assert(modifyExpenseService(service, -1, "apa", 200, "ele", &error) == false);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  318-block  0
call    3 never executed
        -:  319:
       1*:  320:    assert(addExpenseService(service, 1, 100.0, "apa", &error) == false);
        1:  320-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  320-block  1
call    3 never executed
       1*:  321:    assert(strcmp(error.errorMessage, "eroare de repo: exista deja o cheltuiala de acest tip a acestui apartament!\n") == 0);
        1:  321-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  321-block  1
call    2 never executed
        -:  322:
       1*:  323:    assert(modifyExpenseService(service, 1, "apa", 120.0, "apa", &error) == true);
        1:  323-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  323-block  1
call    3 never executed
       1*:  324:    assert(modifyExpenseService(service, 2, "gaz", 250.0, "gaz", &error) == true);
        1:  324-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  324-block  1
call    3 never executed
        -:  325:
       1*:  326:    assert(modifyExpenseService(service, 99, "nonexistent", 500.0, "gaz", &error) == false);
        1:  326-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  326-block  1
call    3 never executed
       1*:  327:    assert(strcmp(error.errorMessage, "eroare de repo: nu exista aceasta cheltuiala!\n") == 0);
        1:  327-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  327-block  1
call    2 never executed
        -:  328:
       1*:  329:    assert(deleteExpenseService(service, -1, "ele", &error) == false);
        1:  329-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  329-block  1
call    3 never executed
       1*:  330:    assert(deleteExpenseService(service, 1, "apa", &error) == true);
        1:  330-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  330-block  1
call    3 never executed
        -:  331:
       1*:  332:    assert(deleteExpenseService(service, 1, "apa", &error) == false);
        1:  332-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  332-block  1
call    3 never executed
       1*:  333:    assert(strcmp(error.errorMessage, "eroare de repo: nu exista aceasta cheltuiala!\n") == 0);
        1:  333-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  333-block  1
call    2 never executed
        -:  334:
        1:  335:    destroyService(service);
        1:  335-block  0
call    0 returned 1
        -:  336:
        1:  337:    testFilterExpensesByAp();
call    0 returned 1
        1:  338:    testFilterExpensesBySum();
call    0 returned 1
        1:  339:    testFilterExpensesByType();
call    0 returned 1
        1:  340:    testSortExpensesBySumAsc();
call    0 returned 1
        1:  341:    testSortExpensesBySumDesc();
call    0 returned 1
        1:  342:    testSortExpensesByTypeAsc();
call    0 returned 1
        1:  343:    testSortExpensesByTypeDesc();
call    0 returned 1
        -:  344:
        1:  345:    printf("test service passed!\n");
call    0 returned 1
        1:  346:}
        -:  347:
function testUndo called 1 returned 100% blocks executed 81%
        1:  348:void testUndo() {
        1:  349:    Service* service = createService();
        1:  349-block  0
call    0 returned 1
        -:  350:    Error error;
        1:  351:    addExpenseService(service, 1, 100.0, "apa", &error);
call    0 returned 1
        1:  352:    addExpenseService(service, 2, 200.0, "gaz", &error);
call    0 returned 1
        1:  353:    addExpenseService(service, 1, 150.0, "incalzire", &error);
call    0 returned 1
        1:  354:    addExpenseService(service, 2, 250.0, "canal", &error);
call    0 returned 1
        1:  355:    undo(service);
call    0 returned 1
       1*:  356:    assert(getRepoLength(service->repo) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  356-block  0
call    3 never executed
        1:  357:    undo(service);
        1:  357-block  0
call    0 returned 1
       1*:  358:    assert(getRepoLength(service->repo) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  358-block  0
call    3 never executed
        1:  359:    undo(service);
        1:  359-block  0
call    0 returned 1
       1*:  360:    assert(getRepoLength(service->repo) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  360-block  0
call    3 never executed
        1:  361:    undo(service);
        1:  361-block  0
call    0 returned 1
       1*:  362:    assert(getRepoLength(service->repo) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  362-block  0
call    3 never executed
       1*:  363:    assert(undo(service)==false);
        1:  363-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  363-block  1
call    3 never executed
        1:  364:    destroyService(service);
        1:  364-block  0
call    0 returned 1
        1:  365:}
function runTests called 1 returned 100% blocks executed 100%
        1:  366:void runTests() {
        1:  367:    testList();
        1:  367-block  0
call    0 returned 1
        1:  368:    testDomain();
call    0 returned 1
        1:  369:    testValidator();
call    0 returned 1
        1:  370:    testRepo();
call    0 returned 1
        1:  371:    testService();
call    0 returned 1
        1:  372:    testUndo();
call    0 returned 1
        1:  373:    printf("\ntest ok toate\n");
call    0 returned 1
        1:  374:}
