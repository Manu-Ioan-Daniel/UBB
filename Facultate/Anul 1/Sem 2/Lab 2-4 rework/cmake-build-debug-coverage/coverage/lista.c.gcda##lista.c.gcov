        -:    0:Source:/mnt/c/Users/Deny/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2-4 rework/lista.c
        -:    0:Graph:/mnt/c/Users/Deny/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2-4 rework/cmake-build-debug-coverage/CMakeFiles/Lab_2_4_rework.dir/lista.c.gcno
        -:    0:Data:/mnt/c/Users/Deny/Documents/GitHub/UBB/Facultate/Anul 1/Sem 2/Lab 2-4 rework/cmake-build-debug-coverage/CMakeFiles/Lab_2_4_rework.dir/lista.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Lenovo on 3/23/2025.
        -:    3://
        -:    4:
        -:    5:#include "lista.h"
        -:    6:#include "oferta.h"
        -:    7:#include <assert.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:
        -:   11:
function createList called 17 returned 100% blocks executed 100%
       17:   12:List* createList(const DestroyFn destroyFn , const CopyFn copyFn) {
       17:   13:    List* l = malloc(sizeof(List));
       17:   14:    l->capacity=INIT_CAPACITY;
       17:   15:    l->elems=(TElem*)malloc(sizeof(TElem)*INIT_CAPACITY);
       17:   16:    l->length=0;
       17:   17:    l->copyFn=copyFn;
       17:   18:    l->destroyFn=destroyFn;
       17:   19:    return l;
       17:   19-block  0
        -:   20:}
function destroyList called 17 returned 100% blocks executed 100%
       17:   21:void destroyList(List* l) {
       58:   22:    for (int i = 0; i < l->length; i++)
       17:   22-block  0
       58:   22-block  1
branch  0 taken 41
branch  1 taken 17 (fallthrough)
       41:   23:        l->destroyFn(getElem(l, i));
       41:   23-block  0
call    0 returned 41
call    1 returned 41
       17:   24:    free(l->elems);
       17:   25:    free(l);
       17:   26:}
function resizeList called 1 returned 100% blocks executed 100%
        1:   27:void resizeList(List* l) {
        1:   28:    l->capacity*=2;
        1:   29:    TElem* aux = (TElem*)malloc(sizeof(TElem)*l->capacity);
       11:   30:    for (int i = 0; i < l->length; i++)
        1:   30-block  0
       11:   30-block  1
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:   31:        aux[i]=l->elems[i];
       10:   31-block  0
        1:   32:    free(l->elems);
        1:   33:    l->elems=aux;
        1:   34:}
function addElem called 44 returned 100% blocks executed 100%
       44:   35:void addElem(List* l, TElem elem) {
       44:   36:    if (l->length==l->capacity)
       44:   36-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 43
        1:   37:        resizeList(l);
        1:   37-block  0
call    0 returned 1
       44:   38:    l->elems[l->length]=elem;
       44:   39:    l->length++;
        -:   40:
       44:   41:}
function deleteElem called 3 returned 100% blocks executed 100%
        3:   42:void deleteElem(List *l,int poz) {
        3:   43:    l->destroyFn(getElem(l,poz));
        3:   43-block  0
call    0 returned 3
call    1 returned 3
        7:   44:    for (int i = poz; i < l->length-1; i++) {
        7:   44-block  0
branch  0 taken 4
branch  1 taken 3 (fallthrough)
        4:   45:        l->elems[i]=l->elems[i+1];
        4:   45-block  0
        -:   46:    }
        3:   47:    l->length-=1;
        3:   48:}
function setElem called 3 returned 100% blocks executed 100%
        3:   49:void setElem(const List *l,int poz,TElem elem) {
        3:   50:    l->destroyFn(l->elems[poz]);
        3:   50-block  0
call    0 returned 3
        3:   51:    l->elems[poz]=elem;
        3:   52:}
function getElem called 143 returned 100% blocks executed 100%
      143:   53:TElem getElem(const List* l,int poz) {
      143:   54:    return l->elems[poz];
      143:   54-block  0
        -:   55:}
function getLength called 121 returned 100% blocks executed 100%
      121:   56:int getLength(const List* l) {
      121:   57:    return l->length;
      121:   57-block  0
        -:   58:
        -:   59:}
function testList called 1 returned 100% blocks executed 75%
        1:   60:void testList() {
        1:   61:    List* l = createList(destroyOferta,copyOferta);
        1:   61-block  0
call    0 returned 1
        1:   62:    Oferta* o1=createOferta("adresa1",1,"apartament",1);
call    0 returned 1
        1:   63:    Oferta* o2=createOferta("adresa2",2,"casa",2);
call    0 returned 1
        1:   64:    Oferta* o3=createOferta("adresa3",3,"casa",3);
call    0 returned 1
        1:   65:    addElem(l,o1);
call    0 returned 1
       1*:   66:    assert(getLength(l)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   66-block  0
call    3 never executed
       1*:   67:    assert(l->elems[0]==o1);
        1:   67-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   67-block  1
call    2 never executed
        1:   68:    addElem(l,o2);
        1:   68-block  0
call    0 returned 1
       1*:   69:    assert(getLength(l)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   69-block  0
call    3 never executed
       1*:   70:    assert(l->elems[1]==o2);
        1:   70-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   70-block  1
call    2 never executed
       1*:   71:    assert(getElem(l,0)==o1);
        1:   71-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   71-block  1
call    3 never executed
       1*:   72:    assert(getElem(l,1)==o2);
        1:   72-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   72-block  1
call    3 never executed
       1*:   73:    assert(l->length==2);
        1:   73-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   73-block  1
call    2 never executed
        1:   74:    setElem(l,1,o3);
        1:   74-block  0
call    0 returned 1
       1*:   75:    assert(l->elems[1]==o3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   75-block  0
call    2 never executed
        1:   76:    deleteElem(l,0);
        1:   76-block  0
call    0 returned 1
       1*:   77:    assert(getLength(l)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   77-block  0
call    3 never executed
       12:   78:    for (int i = 0;i<11;i++) {
        1:   78-block  0
       12:   78-block  1
branch  0 taken 11
branch  1 taken 1 (fallthrough)
       11:   79:        Oferta* o = createOferta("adresa1",(float)i,"apartament",1);
       11:   79-block  0
call    0 returned 11
       11:   80:        addElem(l,o);
call    0 returned 11
        -:   81:    }
       1*:   82:    assert(l->capacity==20);
        1:   82-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   82-block  1
call    2 never executed
        1:   83:    destroyList(l);
        1:   83-block  0
call    0 returned 1
        -:   84:
        1:   85:}
